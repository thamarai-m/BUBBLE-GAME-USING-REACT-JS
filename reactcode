Public-index.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta
name="viewport"
content="width=device-width, initial-scale=1, shrink-to-fit=no"
/>
<meta name="apple-mobile-web-app-title" content="Bubblicious" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="theme-color" content="#bb1616" />
<!--
<!--
<!--
This HTML file is a template.
If you open it directly in the browser, you will see an empty page.
You can add web fonts, meta tags, or analytics to this file.
The build step will place the bundled scripts into the <body> tag.
To begin the development, run `npm start` or `yarn start`.
To create a production bundle, use `npm run build` or `yarn build`.
-->
</body>
</html>

● Src-package json
{
"name": "react-bubble-game",
"version": "1.0.0",
"description": "Quick game prototype",
"keywords": [
"react",
"prototype",
"game"
],
"main": "src/index.js",
"dependencies": {
"react": "16.8.3",
"react-dom": "16.8.3",
"react-scripts": "2.0.3"
},
"devDependencies": {},
"scripts": {
"start": "react-scripts start",
"build": "react-scripts build",
"test": "react-scripts test --env=jsdom",
"eject": "react-scripts eject"
},
"browserslist": [
">0.2%",
"not dead",
"not ie <= 11",
"not op_mini all"
]
}
● bubble.js
import React from "react";
const Bubble = ({ pop }) => {
return <div className="bubble" onClick={pop} ontouchstart={pop} />;
};
export default Bubble;
● Index.js
import React from "react";

import ReactDOM from "react-dom";
import Stage from "./stage";
import "./styles.css";
function App() {
return (
<div className="App">
<Stage />
</div>
);
}
const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);

● src-stage.js
import React, { Component } from "react";
import Bubble from "./bubble";
class Stage extends Component {
constructor(props) {
super(props);
this.state = {
bubbleCount: 25,
popped: 0,
ready: false
};
this.getRandomPosition = this.getRandomPosition.bind(this);
this.popBubble = this.popBubble.bind(this);
this.animateBubble = this.animateBubble.bind(this);
this.renderBubbles = this.renderBubbles.bind(this);
this.ready = this.ready.bind(this);
this.init = this.init.bind(this);
}
componentDidUpdate() {
if (this.state.popped < 1) {
this.init();
}
}

init() {
const bubbles = document.querySelectorAll(".bubble");
for (let i = 0; i < bubbles.length; i++) {
this.animateBubble(bubbles, i);
}
}
ready() {
this.setState({
ready: true
});
}
renderBubbles() {
return [...Array(this.state.bubbleCount)].map((x, i) => (
<Bubble key={i} pop={this.popBubble} />
));
}
getRandomPosition(element) {
const x = document.body.offsetHeight - element.clientHeight;
const y = document.body.offsetWidth - element.clientWidth;
const randomX = Math.floor(Math.random() * x);
const randomY = Math.floor(Math.random() * y);
return [randomX, randomY];
}
animateBubble(bubbles, i) {
const bubble = bubbles[i];
const xy = this.getRandomPosition(bubble);
Object.assign(bubble.style, {
top: xy[0] + "px",
left: xy[1] + "px",
zIndex: i,
animationDuration: Math.floor(Math.random() * 15 + 7.5) + "s"
});
bubble.classList.add("animating");
}
popBubble(e) {
e.preventDefault();
const bubble = e.target;

const audio = document.getElementById("pop");
bubble.classList.remove("animating");
bubble.classList.add("popped");
audio.play();
this.setState({
popped: this.state.popped + 1
});
window.setTimeout(function() {
bubble.style.display = "none";
}, 500);
}
render() {
const { message, popped, ready, bubbleCount } = this.state;
return (
<div className="stage" id="stage">
<div className="message">{message}</div>
<audio
id="pop"
src="https://uploads.codesandbox.io/uploads/user/e75d21d3-e2a7-4d7a-bd14-09ebe09ee6b0/J
MLB-pop.mp3"
/>
<span className="score">
Score : {popped} / {bubbleCount}
</span>
{ready ? (
this.renderBubbles()
) : (
<button onClick={this.ready}>Ready</button>
)}
</div>
);
}
}
export default Stage;
● styles.css
html {
box-sizing: border-box;
font-family: "Luckiest Guy", cursive;
position: fixed;

overflow: hidden;
}
* {
margin: 0;
padding: 0;
}
*,
*:before,
*:after {
box-sizing: inherit;
}
.score {
z-index: 90;
display: block;
position: relative;
background: #ea3b3b;
padding: 10px;
font-size: 24px;
color: #fff;
text-shadow: -2px 3px 0 #bb1616;
}
.bubble {
-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
opacity: 1;
transform: scale(1);
transition: all ease-in-out;
cursor: pointer;
position: absolute;
width: 20vw;
height: 20vh;
background:
url("https://uploads.codesandbox.io/uploads/user/e75d21d3-e2a7-4d7a-bd14-09ebe09ee6b0/YL
cO-water-bubble.png")
no-repeat 50% / contain;
}
.bubble.popped {
animation: popped 0.3s ease-out both;
animation-duration: 0.3s !important;
}

.bubble.animating {
animation: float 12s linear infinite both;
}
.stage {
overflow: hidden;
background: #1c92d2;
background: linear-gradient(to bottom, #f2fcfe, #1c92d2);
position: relative;
width: 100vw;
height: 200vh;
}
button {
position: absolute;
top: 25%;
left: 50%;
transform: translate(-50%, -50%);
font-family: inherit;
color: #fff;
border: 0;
font-size: 50px;
color: white;
background: #ea3b3b;
padding: 0.5em;
border: 1px solid #ea3b3b;
border-radius: 10px;
cursor: pointer;
box-shadow: -10px 10px 0 #bb1616;
transition: all 0.3s ease-in-out;
line-height: 1;
text-shadow: -5px 5px 0 #bb1616;
}
@keyframes popped {
0% {
transform: scale(1);
opacity: 1;
}
100% {
opacity: 0;
transform: scale(3);

}
}
@keyframes float {
0% {
opacity: 0;
transform: translateY(200%);
}
5% {
opacity: 1;
}
95% {
opacity: 1;
}
100% {
opacity: 0;
transform: translateY(-1000%);
}
}
@keyframes messageDisplay {
0% {
opacity: 0;
transform: translate(-50%, -50%) scale(0);
}
50% {
opacity: 1;
transform: translate(-50%, -50%) scale(1);
}
100% {
opacity: 0;
transform: translate(-50%, -50%) scale(3);
}
}
.message {
position: absolute;
top: 50%;
left: 50%;

transform: translate(-50%, -50%) scale(0);
text-shadow: -2px 4px 0 #fff;
color: yellow;
font-size: 200px;
z-index: -1;
}
.message.animated {
z-index: 99;
animation: messageDisplay 1s ease;
}
